require("dotenv").config();
const { Client, GatewayIntentBits } = require("discord.js");
const fs = require("fs");

const client = new Client({
    intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages]
});

const SETTINGS_FILE = "channel_settings.json";
const EXCLUDED_FILE = "excluded_messages.json";

function loadJson(file, def) {
    return fs.existsSync(file) ? JSON.parse(fs.readFileSync(file, "utf8")) : def;
}
function saveJson(file, data) {
    fs.writeFileSync(file, JSON.stringify(data, null, 4), "utf8");
}

let channelSettings = loadJson(SETTINGS_FILE, {});
let excludedMessages = new Set(loadJson(EXCLUDED_FILE, []));

// –ê–≤—Ç–æ—Å–Ω–æ—Å –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
setInterval(async () => {
    console.log("üïí Entered cleanup interval");

    for (const [channelId, lifetime] of Object.entries(channelSettings)) {
        try {
            const channel = await client.channels.fetch(channelId);
            if (!channel || !channel.isTextBased()) {
                console.log(`‚ö†Ô∏è –ö–∞–Ω–∞–ª ${channelId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π`);
                continue;
            }

            const messages = await channel.messages.fetch({ limit: 100 });
            console.log(`üîπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª ${channel.name} (${messages.size} —Å–æ–æ–±—â–µ–Ω–∏–π)`);

            const now = Date.now();
            let deletedCount = 0;

            messages.forEach(msg => {
                if (excludedMessages.has(msg.id)) {
                    console.log(`‚Äî –ü—Ä–æ–ø—É—â–µ–Ω–æ (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ) —Å–æ–æ–±—â–µ–Ω–∏–µ ${msg.id}`);
                    return;
                }
                if (msg.pinned) {
                    console.log(`‚Äî –ü—Ä–æ–ø—É—â–µ–Ω–æ (–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ) —Å–æ–æ–±—â–µ–Ω–∏–µ ${msg.id}`);
                    return;
                }
                if ((now - msg.createdTimestamp) / 1000 > lifetime) {
                    msg.delete().catch(err => console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${msg.id}:`, err));
                    deletedCount++;
                    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ${msg.id}`);
                }
            });

            console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channel.name}, —É–¥–∞–ª–µ–Ω–æ ${deletedCount} —Å–æ–æ–±—â–µ–Ω–∏–π`);

        } catch (err) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–∞ ${channelId}:`, err);
        }
    }
}, 60 * 1000);



client.on("clientReady", () => {
    console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ ${client.user.tag}`);
});

client.on("interactionCreate", async (interaction) => {
    if (!interaction.isChatInputCommand()) return;

    if (interaction.commandName === "add_channel") {
        const channel = interaction.options.getChannel("channel");
        const minutes = interaction.options.getInteger("minutes");
        channelSettings[channel.id] = minutes * 60;
        saveJson(SETTINGS_FILE, channelSettings);
        await interaction.reply(`‚úÖ –í ${channel} —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è ${minutes} —Å–µ–∫—É–Ω–¥.`);
    }

    if (interaction.commandName === "remove_channel") {
        const channel = interaction.options.getChannel("channel");
        if (channelSettings[channel.id]) {
            delete channelSettings[channel.id];
            saveJson(SETTINGS_FILE, channelSettings);
            await interaction.reply(`‚ùå –ö–∞–Ω–∞–ª ${channel} —É–¥–∞–ª—ë–Ω –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫.`);
        } else {
            await interaction.reply("‚ö†Ô∏è –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –Ω–µ –±—ã–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω.");
        }
    }

    if (interaction.commandName === "list_channels") {
        if (Object.keys(channelSettings).length === 0) {
            return interaction.reply("‚ö†Ô∏è –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.");
        }
        let text = "üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤:\n";
        for (const [cid, lifetime] of Object.entries(channelSettings)) {
            const ch = await client.channels.fetch(cid).catch(() => null);
            text += `- ${ch ? ch : cid}: ${lifetime} —Å–µ–∫—É–Ω–¥\n`;
        }
        await interaction.reply(text);
    }

    if (interaction.commandName === "exclude") {
        const messageId = interaction.options.getString("message_id");
        excludedMessages.add(messageId);
        saveJson(EXCLUDED_FILE, [...excludedMessages]);
        await interaction.reply(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ ${messageId} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.`);
    }

    if (interaction.commandName === "unexclude") {
        const messageId = interaction.options.getString("message_id");
        excludedMessages.delete(messageId);
        saveJson(EXCLUDED_FILE, [...excludedMessages]);
        await interaction.reply(`‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ ${messageId} —É–±—Ä–∞–Ω–æ –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.`);
    }

    if (interaction.commandName === "list_excluded") {
        if (excludedMessages.size === 0) {
            return interaction.reply("‚ö†Ô∏è –ù–µ—Ç –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.");
        }
        await interaction.reply("üìã –ò—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n" + [...excludedMessages].join("\n"));
    }
});

client.login(process.env.DISCORD_TOKEN);
